global !p
def package_define(path):
  no_src = re.sub('^.*?src/', '', path)
  no_src = re.sub('/', '.', no_src)
  no_src = re.sub('^(main|test)\.', '', no_src)
  no_src = re.sub('^java\.', '', no_src)
  return re.sub('\.java$', '', no_src)


def expand(text, jump_pos=1):
  if snip.tabstop != jump_pos:
    return
  vim.eval('feedkeys("\<C-R>=UltiSnips#ExpandSnippet()\<CR>")')

endglobal

snippet { "{}"
{
	${0://pass}
}
endsnippet


snippet 'test (\S+(\s+\S+)*)+$' "A simple test for java code" r
@Test
public void test`!p
import re
snip.rv = re.sub(r'(^\w|\s(\w))', lambda m: m.group(1).strip().capitalize(), match.group(1))`() {
	$0
}
endsnippet

snippet class
public class `!p
import re
snip.rv = re.sub(r'(\w+)\.(\w+)$', r'\1', snip.fn)` {
	$0
}
endsnippet

post_jump "expand(snip)"
snippet skel
package `!p snip.rv=package_define(path)`

class$1
endsnippet

post_jump "expand(snip)"
snippet ske
skel$1
endsnippet

snippet '(\s*)([$0-9A-Za-z_]*).ret' "Return snippet" r 
`!p
if not match.group(2):
  snip.rv = match.group(1) + 'return;'
else: 
  snip.rv = match.group(1) + 'return ' + match.group(2) + ';'`
endsnippet

snippet '(.* ){{$' "expand method body" rbA
`!p snip.rv = match.group(1) + "{"`
	$0
}
endsnippet
