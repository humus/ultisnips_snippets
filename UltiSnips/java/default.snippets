global !p
def package_define(path):
  no_src = re.sub('^.*?src/', '', path)
  no_src = re.sub('/', '.', no_src)
  no_src = re.sub('^(main|test)\.', '', no_src)
  no_src = re.sub('^java\.', '', no_src)
  return re.sub('\.\w+\.java$', '', no_src) + ";"


def expand(text, jump_pos=1):
  if snip.tabstop != jump_pos:
    return
  vim.eval('feedkeys("\<C-R>=UltiSnips#ExpandSnippet()\<CR>")')

def lowfirst(text):
  return text[0].lower() + text[1:]

def upfirst(text):
  return text[0].upper() + text[1:]

endglobal

snippet { "{}"
{
	${0://pass}
}
endsnippet


snippet '(?<!\w\s)test (\S+(\s+\S+)*)+$' "A simple test for java code" r
@Test
public void test`!p
import re
snip.rv = re.sub(r'(^\w|\s(\w))', lambda m: m.group(1).strip().capitalize(), match.group(1))`() {
	$0
}
endsnippet

snippet class
public class `!p
import re
snip.rv = re.sub(r'(\w+)\.(\w+)$', r'\1', snip.fn)` {
	$0
}
endsnippet

post_jump "expand(snip)"
snippet skel
package `!p snip.rv=package_define(path)`

class$1
endsnippet

post_jump "expand(snip)"
snippet ske
skel$1
endsnippet

snippet '(\s*)([$0-9A-Za-z_]*).ret' "Return snippet" r 
`!p
if not match.group(2):
  snip.rv = match.group(1) + 'return;'
else: 
  snip.rv = match.group(1) + 'return ' + match.group(2) + ';'`
endsnippet

snippet '(.* ){{$' "expand method body" rbA
`!p snip.rv = match.group(1) + "{"`
	$0
}
endsnippet

snippet out "expand to system.out.println" i
System.out.println(${0:${VISUAL:""}});
endsnippet

snippet if "if(something){}" b
if (${VISUAL}) {
	$0
}
endsnippet

snippet logger "Logger log = LoggerFactory.getLogger(...)" b
private static final Logger log = LoggerFactory.getLogger(`!p snip.rv=re.sub(r'(\w+)\.(\w+)$', r'\1', snip.fn)`.class);
endsnippet

snippet log "log variable" b
log.debug("$1: {}", ${1:${VISUAL:foo}});$0
endsnippet

snippet debug "log.debug(...)" b
log.debug("$0");
endsnippet

snippet '(?<!(\w\s|.\w))d (.+)$' "log any string" r
`!p
snip.rv = "log.debug(\"" + match.group(2) + "\");"`
endsnippet

snippet 'echo (.+)$' "log any string" r
`!p
snip.rv = "log.info(\"" + match.group(1) + "\");"`
endsnippet

snippet '^(\s+)mock? (\w+)' "@Mock private..." r
`!p snip.rv = match.group(1)`@Mock
`!p snip.rv = match.group(1)`private `!p
snip.rv = upfirst(match.group(2))
` `!p
snip.rv = lowfirst(match.group(2))
`;
endsnippet

snippet '(awired?|auto|wired) (\w+)' "@Autowired private..." r
@Autowired
private `!p
snip.rv = upfirst(match.group(2))
` `!p
snip.rv = lowfirst(match.group(2))
`;
endsnippet

snippet n "new" b
${1/(.)(.+)/\u$1$2/} ${1:type} = new ${1/(.)(.+)/\u$1$2/}($0);
endsnippet

snippet '(\w+)\.n(ew)?' "object object = new object" r
`!p
type = match.group(1)
snip.rv = type[0].upper() + type[1:] + " " + type[0].lower() + type[1:]  + " = new " + type[0].upper() + type[1:] + "();"
`
endsnippet

snippet 'value (\w+) as (\w+)' "@Value" r
@Value("\${$0}")
private `!p
snip.rv = upfirst(match.group(2))
` `!p
snip.rv=match.group(1)`;
endsnippet

snippet 'this\.(\w+)' "this.x = x" r
`!p snip.rv = match.group(0)` = `!p snip.rv = match.group(1)`;
endsnippet

snippet securityconfig "security configuration, basic" b
package `!p snip.rv=package_define(path)`

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

@Configuration
public class `!p snip.rv=re.sub(r'(\w+)\.(\w+)$', r'\1', snip.fn)` extends WebSecurityConfigurerAdapter {

	private static final Logger log = LoggerFactory.getLogger(`!p snip.rv=re.sub(r'(\w+)\.(\w+)$', r'\1', snip.fn)`.class);

	@Override
	protected void configure(HttpSecurity http) throws Exception {
		log.debug("configuring http: {}", http);
		http
				.csrf().disable()
				.authorizeRequests().anyRequest().authenticated()
				.and()
				.httpBasic();
	}

	@Autowired
	public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {
		log.debug("configuring global: {}", auth);
		auth.inMemoryAuthentication()
				.withUser("admin")
				.password("{noop}admin")
				.roles("ADMIN");
	}
}
endsnippet

snippet '(catch|try) (\w+)' "try catch exception" r
try {
	
}
catch (`!p snip.rv = match.group(2)` `!p
snip.rv = lowfirst(match.group(2))`) {
	String message = `!p
snip.rv = lowfirst(match.group(2))`.getMessage();
	log.info("`!p
snip.rv = lowfirst(match.group(2))`.getMessage(): {}", message);
	$0
}
endsnippet

snippet '\w+\.\w+' "();" r
`!p snip.rv = match.group(0)`($0);
endsnippet
