priority -50

snippet '(\S+),\s{0,2}(\S+).p' "path snippet" r
path(`!p
snip.rv = match.group(1) + ', ' + match.group(2)
`),
endsnippet

snippet '(\S+),\s{0,2}(\S+).path' "path snippet" r
path(`!p
snip.rv = "'" + match.group(1) + "', " + match.group(2).strip()
`),
endsnippet

snippet '(\s+)(\S.*).ret' "Return snippet" r
`!p
snip.rv = match.group(1) + 'return ' + match.group(2)`
endsnippet

snippet as_view "TemplateView.as_view"
TemplateView.as_view(template_name='$1')$0
endsnippet

snippet entity "Django entity"
class ${1:Model}(models.Model):
	$0
endsnippet

snippet fieldchar "CharField" bi
${1:charfield} = models.CharField(max_length=${2:255})$0
endsnippet

snippet fieldtext "TextField" bi
${1:textfield} = models.TextField()$0
endsnippet

snippet fielddatetime "DateTimeField"
${1:datetimefield} = models.DateTimeField('$2')$0
endsnippet

snippet slugfield "SlugField" bi
${1:slug} = models.SlugField(unique=True)$0
endsnippet

snippet fk "ForeignKey" i
${1:parent} = models.ForeignKey(${1/./\u$0/}, on_delete=models.CASCADE)
endsnippet

snippet intfield "IntegerField" i
${1:myint} = models.IntegerField(default=0)$0
endsnippet

snippet modeladmin "Model admin"
class ${1:MyModel}Admin(admin.ModelAdmin):
	model = $1
	list_display = ('id', )
	# prepopulated_fields = {'slug': ('slug_filed', ), }


# admin.site.register($1, $1Admin)
endsnippet

snippet '(\S+).all' "objects.all" r
`!p snip.rv = match.group(1)`.objects.all()
endsnippet

snippet '(\S+)\.get' "objects.get()" r
`!p snip.rv = match.group(1)`.objects.get($0)
endsnippet

snippet '(\S+).filter' "objects.filter()" r
`!p snip.rv = match.group(1)`.objects.filter($0)
endsnippet

snippet defreq "def view(request):"
def ${1:index}(request$2):
	${0:pass}
endsnippet

snippet formsfile "forms file"
from django.forms import ModelForm
from .models import ${1:AModel}
endsnippet

snippet modelform "ModelForm"
class ${1:Model}Form(ModelForm):
	class Meta:
		model = $1
		fields = ('name', $0)
endsnippet

snippet registrationconf "config of registration 2.0"
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
DEFAULT_FROM_EMAIL = ''
EMAIL_HOST_USER = ''
EMAIL_HOST_PASSWORD = ''
EMAIL_USE_TLS = False
EMAIL_PORT = 1025

LOGIN_REDIRECT_URL = ''
endsnippet

snippet render "render a page" bi
${1:return} render(${2:request}, '$0', {})
endsnippet

snippet passviews
from django.contrib.auth.views import (
	PasswordResetView,
	PasswordResetDoneView,
	PasswordResetConfirmView,
	PasswordResetCompleteView,
)
endsnippet

snippet pathspass
path('accounts/password/reset/', PasswordResetView.as_view(),
	 {'template_name': 'registration/password_reset_form.html'},
	 name='password_reset'),
path('accounts/password/reset_done/', PasswordResetDoneView.as_view(),
	 {'template_name': 'registration/password_reset_done.html'},
	 name='password_reset_done'),
path('accounts/password/reset/<uidb64>/<token>/',
	 PasswordResetConfirmView.as_view(),
	 {'template_name': 'registration/password_reset_confirm.html'},
	 name='password_reset_confirm'),
path('accounts/password/done/', PasswordResetCompleteView.as_view(),
	 {'template_name': 'registration/password_reset_complete.html'},
	 name='password_reset_complete'),
path('accounts/password/change/', PasswordChangeView.as_view(),
	 {'template_name': 'registration/password_change_form.html'},
	 name='password_change'),
path('accounts/password/change/done/',
	 PasswordChangeDoneView.as_view(template_name='registration/password_change_done.html'),
	 name='password_change_done'),
endsnippet

snippet reloneone "" bi
models.OneToOneField(${1:Left}, on_delete=models.CASCADE, blank=True, null=True)
endsnippet

snippet ifget "if request.method == 'GET':"
if request.method == 'GET':
	$0
endsnippet

snippet ifpost "if request.method == 'POST':"
if request.method == 'POST':
	$0
endsnippet

snippet '(\S+)\.valid' "if group(1).is_valid():" r
if `!p snip.rv=match.group(1)`.is_valid():
	$0
endsnippet

snippet sae "self.assertEquals()"
self.assertEquals(${1:current}, ${2:expected})
endsnippet

snippet urlspy "urls.py"
from django.urls import path

urlpatterns = [
	path('', views.index, name='index')
]$0
endsnippet

snippet classform "class FormForm(forms.Form):"
class $1Form(forms.Form):
	pass$0
endsnippet

snippet '(\S+)\.s(elf|el|e)?' "" r
def `!p snip.rv=match.group(1)`(self$1):
	${2:pass}$0
endsnippet

snippet 's(elf|el|e)?\.' "" ri
self.${1:none}$0
endsnippet

## rest_framework ##
snippet iserializers "import serializer"
from rest_framework import serializers
endsnippet

snippet serializer
class ${1:Model}Serializer(serializers.HyperlinkedModelSerializer):
	class Meta:
		model = $1
		fields = (${2:'name'}, $0)
endsnippet

snippet apiview "@api_view['METHOD']"
@api_view(['${1:GET}'])
def ${2:viewname}(request${3}):
	"""
	${4:docstring}
	"""
	${0}
endsnippet

snippet retdata "return Resonse(serializer.data)"
	return Response(${1:serializer}.data)
endsnippet

snippet memorysettings "DATABASES={...}" b
from .setttings import *

DATABASES = {
		"default": {
			"ENGINE": "django.db.backends.sqlite3",
			"NAME": "memory:",
		}
}
EMAIL_BACKEND = "django.core.mail.backends.locmem.EmailBackend"
endsnippet
