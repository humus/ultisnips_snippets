priority -50

global !p
def format_test_name():
    bufline = snip.snippet_start[0]
    re_test = re.compile(r'(def test_)(.+:)')
    text = snip.buffer[bufline]
    replacement = lambda m: m.group(1) + space_to_underscore(m.group(2))
    text = re_test.sub(replacement, text)
    snip.buffer[bufline] = text

def space_to_underscore(text):
    return re.sub(r'\s', '_', text)

endglobal

snippet #! "Shebang header for python scripts" b
#!/usr/bin/env python
# -*- coding: utf-8 -*-
$0
endsnippet

snippet '(\s+)(\S.+)\.if$' "" r
`!p snip.rv = match.group(1) + 'if ' + match.group(2)`:
	`!p snip.rv = match.group(1)`$0
endsnippet

snippet '(\s+)(\S.+)\.ife(|l|ls|lse)$' "" r
`!p snip.rv = match.group(1) + 'if ' + match.group(2)`:
	`!p snip.rv = match.group(1)`${1:pass}
`!p snip.rv = match.group(1)`else:
	`!p snip.rv = match.group(1)`${0:pass}
endsnippet

snippet init "__init__(self,):"
def __init__(self$1):
	${2:pass}
endsnippet

snippet selfinit "__init__(self,):"
def __init__(self$1):
	${2:pass}

snippet _str ""
def __str__(self):
	return self.${1}$0
endsnippet

snippet try
try:
	$0
except ${1:Exception}:
	pass
endsnippet

snippet testclass "A test class" b
class Test${1:Class}(TestCase):

	def test_$2(self):
		${3:pass}
endsnippet

snippet '^\s*(\S.+)\.test' "test template" r
def test`!p
import re
snip.rv = re.sub(r'(^\w|\s(\w))', lambda m: '_' + m.group(1).strip(), match.group(1))
`(self):
	pass
endsnippet

snippet '\S+((?: \S+){1,10})(?<!_)(_{1,9})' "turns written text into snake_case" ir
`!p import re
times = len(match.group(2)) - 1
retstring = re.sub('(.*\S+) (\S+)_(.*)', r'\1_\2\3', match.group(0))
while times > 0:
	if not ' ' in retstring:
		break
	times -= 1
	retstring = re.sub('(.*\S+) (\S+)_(.*)', r'\1_\2\3', retstring)
snip.rv=retstring`
endsnippet

post_jump "if snip.tabstop == 0: format_test_name()"
snippet test "Description" b
def test_$1(${2:self}):
	${0:pass}
endsnippet


